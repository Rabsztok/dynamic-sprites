#!/usr/bin/env ruby

$LOAD_PATH.push File.expand_path("../lib", File.dirname(__FILE__)) # add sprite factory library to load path

require 'dynamic-sprites'
require 'optparse'

options   = { layout: 'vertical', selector: 'img.sprite' }
op        = OptionParser.new
op.banner = <<-eos
#{DynamicSprites::DESCRIPTION}

Usage: dynamic-sprites <command> [PATH] [options]

Available commands:
    init:     generates sass mixin, you can pass your own path as an option
    generate: generates sprite, you must enter relative or absolute path to source images

eos

op.on("-h", "--help") do
  puts op.to_s
  exit!
end

op.on("-v", "--version") do
  puts DynamicSprites::VERSION
  exit!
end

layout_help       = "specify layout orientation   ( horizontal, vertical, packed )"
selector_help     = "specify custom selector to use ( default: 'img.sprite' )"
output_help       = "specify output location for generated image ( default: <sources folder>.png )"
geometry_help     = "specify geometry of single sprite image element (e.g.: 160x65)"

op.on("--layout       [ORIENTATION]", layout_help)       {|value| options[:layout]       = value }
op.on("--selector     [SELECTOR]",    selector_help)     {|value| options[:selector]     = value }
op.on("--output       [PATH]",        output_help)       {|value| options[:output]       = value }
op.on("--layout       [ORIENTATION]", layout_help)       {|value| options[:layout]       = value }
op.on("--geometry     [GEOMETRY]",    geometry_help)     {|value| options[:geometry]       = value }

begin
  op.parse!(ARGV)
  command = ARGV[0]
  path = ARGV[1]
  if command.nil?
    raise "You must pass command (init, generate)\nUsage: dynamic-sprites <command> [PATH] [options]"
  elsif command == 'generate' and path.nil?
    raise "Generate command requires path to source images\nUsage: dynamic-sprites generate <PATH> [options]"
  end
  ARGV.clear
  DynamicSprites.run!(command, path, options)
rescue Exception => ex
  puts ex.message
  exit!
end